basePath: /
definitions:
  types.CreateTaskRequest:
    properties:
      code:
        type: string
      translator:
        type: string
    type: object
  types.CreateTaskResponse:
    properties:
      task_id:
        type: string
    type: object
  types.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  types.GetTaskResultResponse:
    properties:
      result:
        $ref: '#/definitions/types.TaskResult'
    type: object
  types.GetTaskStatusResponse:
    properties:
      status:
        type: string
    type: object
  types.LoginUserRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  types.LoginUserResponse:
    properties:
      token:
        type: string
    type: object
  types.RegisterUserRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  types.TaskResult:
    properties:
      stderr:
        type: string
      stdout:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample server.
  title: Task-server API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Logs in a user and returns a session token
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.LoginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User logged in successfully
          schema:
            $ref: '#/definitions/types.LoginUserResponse'
        "400":
          description: Invalid JSON
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "401":
          description: Incorrect login or password
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Login a user
      tags:
      - user
  /register:
    post:
      consumes:
      - application/json
      description: Registers a new user with a username and password
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            type: string
        "400":
          description: Invalid JSON or user already exists
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Register a new user
      tags:
      - user
  /result/{task_id}:
    get:
      description: Returns the result of a completed task using its unique ID.
      parameters:
      - description: Unique Task ID
        format: uuid
        in: path
        name: task_id
        required: true
        type: string
      - default: Bearer <ваш_токен>
        description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Task result
          schema:
            $ref: '#/definitions/types.GetTaskResultResponse'
        "400":
          description: Invalid task ID format or internal error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Retrieve task result
      tags:
      - task
  /status/{task_id}:
    get:
      description: Fetches the current status of a task using its unique ID.
      parameters:
      - description: Unique Task ID
        format: uuid
        in: path
        name: task_id
        required: true
        type: string
      - default: Bearer <ваш_токен>
        description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Current task status
          schema:
            $ref: '#/definitions/types.GetTaskStatusResponse'
        "400":
          description: Invalid task ID format
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Retrieve task status
      tags:
      - task
  /task:
    post:
      consumes:
      - application/json
      description: Creates a new task with the provided translator and code, and returns
        the unique task ID.
      parameters:
      - default: Bearer <ваш_токен>
        description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Task creation request payload
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/types.CreateTaskRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Task successfully created
          schema:
            $ref: '#/definitions/types.CreateTaskResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new task
      tags:
      - task
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
